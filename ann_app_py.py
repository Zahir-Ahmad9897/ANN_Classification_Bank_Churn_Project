# -*- coding: utf-8 -*-
"""ANN_app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17nQpRFmal7CX9sBb8vsilAUjZIyq86UI

## ***ANN_Project Streamlit Web App***
"""

# Commented out IPython magic to ensure Python compatibility.
#  %%writefile ANN_app.py
import pandas as pd
import streamlit as st
import pickle
from tensorflow.keras.models import load_model

model = load_model('/content/drive/MyDrive/ANN_Project/ANN_Churn_project/model.h5')

with open('/content/drive/MyDrive/ANN_Project/ANN_Churn_project/label_encoder_gender.pkl', 'rb') as file:
    label_encoder_gender = pickle.load(file)

with open('/content/drive/MyDrive/ANN_Project/ANN_Churn_project/one_hot_encoder.pkl', 'rb') as file:
    one_hot_encoder_geo = pickle.load(file)

with open('/content/drive/MyDrive/ANN_Project/ANN_Churn_project/scaler.pkl', 'rb') as file:
    scaler = pickle.load(file)

st.title("Bank Customer Churn Prediction")

credit_score = st.number_input("Credit Score", min_value=300, max_value=900, value=600)
geography = st.selectbox("Geography", ['France', 'Germany', 'Spain'])
gender = st.selectbox("Gender", ['Male', 'Female'])
age = st.slider("Age", 18, 100, 40)
tenure = st.slider("Tenure", 0, 10, 3)
balance = st.number_input("Balance", value=60000.0)
num_products = st.selectbox("Number of Products", [1, 2, 3, 4])
has_cr_card = st.selectbox("Has Credit Card?", [0, 1])
is_active_member = st.selectbox("Is Active Member?", [0, 1])
estimated_salary = st.number_input("Estimated Salary", value=50000.0)

if st.button("Predict"):
    input_df = pd.DataFrame([{
        'CreditScore': credit_score,
        'Geography': geography,
        'Gender': gender,
        'Age': age,
        'Tenure': tenure,
        'Balance': balance,
        'NumOfProducts': num_products,
        'HasCrCard': has_cr_card,
        'IsActiveMember': is_active_member,
        'EstimatedSalary': estimated_salary
    }])

    input_df['Gender'] = label_encoder_gender.transform(input_df['Gender'])
    geo_encoded = one_hot_encoder_geo.transform(input_df[['Geography']]).toarray()
    geo_encoded_df = pd.DataFrame(geo_encoded, columns=one_hot_encoder_geo.get_feature_names_out(['Geography']))
    input_df = input_df.drop('Geography', axis=1)
    input_df = pd.concat([input_df, geo_encoded_df], axis=1)
    input_scaled = scaler.transform(input_df)

    prediction = model.predict(input_scaled)
    prob = prediction[0][0]

    st.subheader("Prediction Result")
    st.write(f"Churn Probability: {prob:.2f}")
    if prob > 0.5:
        st.error("Customer is likely to churn.")
    else:
        st.success("Customer is likely to stay.")

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

!ls /content/drive/MyDrive/ANN_Project/ANN_Churn_project/

!wget -q -O - ipv4.icanhazip.com
# #

!streamlit run ANN_app.py & npx localtunnel --port 8501

